//
// iCloud KVS
//
/*
- (void)manuallySyncStore {

    BOOL shouldSync = [self iCloudSyncOn];
    
    if (!shouldSync) {
        return;
    }
    
    
    if ([[Reachability reachabilityForLocalWiFi] currentReachabilityStatus] != ReachableViaWiFi) {
        return;
    }
    
    NSUbiquitousKeyValueStore *store = [NSUbiquitousKeyValueStore defaultStore];
    
    // Make sure that you have the most recent data
    [store synchronize];
    
    
    // time to sync bitches
    
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];

    id fdc = [store objectForKey:@"FBSelectedFriendsDict"];
    id autc = [store objectForKey:@"addedUsernames_twitter"];
    id utc = [store objectForKey:@"usernames_twitter"];
    id ddc = [store objectForKey:@"deleted_dict_facebook"];
    id dac = [store objectForKey:@"deleted_array_twitter"];
    
    id fdl = [defaults objectForKey:@"FBSelectedFriendsDict"];
    id autl = [defaults objectForKey:@"addedUsernames_twitter"];
    id utl = [defaults objectForKey:@"usernames_twitter"];
    
    // check for no changes
        
    //
    // Facebook Selected Friends
    //
    
    NSMutableDictionary *remoteFriendsDict = [[NSMutableDictionary alloc]initWithDictionary:(NSMutableDictionary *)fdc];
    NSMutableDictionary *localFriendsDict = [[NSMutableDictionary alloc]initWithDictionary:(NSMutableDictionary *)fdl];
    
    NSMutableDictionary *cloudDeletionDict = [[NSMutableDictionary alloc]initWithDictionary:(NSMutableDictionary *)ddc]; // from sync-before-this-sync
    
    NSMutableDictionary *deleteDict = [[NSMutableDictionary alloc]initWithDictionary:kDBSyncDeletedFBDict];
    
    for (id key in cloudDeletionDict.allKeys) {
        [localFriendsDict removeObjectForKey:key];
        if ([remoteFriendsDict.allKeys containsObject:key]) {
            [remoteFriendsDict removeObjectForKey:key];
        }
    }
    
    for (id key in deleteDict.allKeys) {
        [remoteFriendsDict removeObjectForKey:key];
        if ([localFriendsDict.allKeys containsObject:key]) {
            [localFriendsDict removeObjectForKey:key];
        }
    }
    
    [cloudDeletionDict removeAllObjects];
    
    [cloudDeletionDict addEntriesFromDictionary:deleteDict];
    
    [store setObject:cloudDeletionDict forKey:@"deleted_dict_facebook"];
    
    [deleteDict removeAllObjects];
    [[NSUserDefaults standardUserDefaults]setObject:deleteDict forKey:kDBSyncDeletedFBDictKey];
    
    NSMutableDictionary *combinedDict = [[NSMutableDictionary alloc]init];
    [combinedDict addEntriesFromDictionary:remoteFriendsDict];
    [combinedDict addEntriesFromDictionary:localFriendsDict];
    
    [store setObject:combinedDict forKey:@"FBSelectedFriendsDict"];
    [defaults setObject:combinedDict forKey:@"FBSelectedFriendsDict"];
    
    
    //
    // Twitter Added Users
    //
    
    NSMutableArray *combinedArray = [[NSMutableArray alloc]init];
    NSMutableArray *autcA = [[NSMutableArray alloc]initWithArray:(NSMutableArray *)autc];
    NSMutableArray *autlA = [[NSMutableArray alloc]initWithArray:(NSMutableArray *)autl];
    
    NSMutableArray *deleteArray = [[NSMutableArray alloc]initWithArray:kDBSyncDeletedTArray];
    
    NSMutableArray *cloudDeleteArray = [[NSMutableArray alloc]initWithArray:(NSMutableArray *)dac];
    
    for (id obj in deleteArray) {
        if ([autcA containsObject:obj]) {
            [autcA removeObject:obj];
        }
    }
    
    for (id obj in cloudDeleteArray) {
        if ([autlA containsObject:obj]) {
            [autlA removeObject:obj];
        }
    }
    
    [combinedArray addObjectsFromArray:autcA];
    [combinedArray addObjectsFromArray:autlA];
    
    NSMutableArray *finalArray = [[NSMutableArray alloc]init];
    
    for (id obj in combinedArray) {
        if (![finalArray containsObject:obj]) {
            [finalArray addObject:obj];
        }
    }
    
    [store setObject:finalArray forKey:@"addedUsernames_twitter"];
    [defaults setObject:finalArray forKey:@"addedUsernames_twitter"];
    
    
    //
    // Twitter Selected Users
    //
    
    NSMutableArray *combinedArrayF = [[NSMutableArray alloc]init];
    
    NSMutableArray *selectedUsersTCloud = [[NSMutableArray alloc]initWithArray:(NSMutableArray *)utc];
    NSMutableArray *selectedUsersTLocal = [[NSMutableArray alloc]initWithArray:(NSMutableArray *)utl];
    
    for (id obj in deleteArray) {
        if ([selectedUsersTCloud containsObject:obj]) {
            [selectedUsersTCloud removeObject:obj];
        }
    }
    
    for (id obj in cloudDeleteArray) {
        if ([selectedUsersTLocal containsObject:obj]) {
            [selectedUsersTLocal removeObject:obj];
        }
    }
    
    [cloudDeleteArray removeAllObjects];
    [cloudDeleteArray addObjectsFromArray:deleteArray];
    [store setObject:cloudDeleteArray forKey:@"deleted_array_twitter"];
    
    [deleteArray removeAllObjects];
    [defaults setObject:deleteArray forKey:kDBSyncDeletedTArrayKey];
    
    [combinedArrayF addObjectsFromArray:selectedUsersTCloud];
    [combinedArrayF addObjectsFromArray:selectedUsersTLocal];
    
    NSMutableArray *finalArrayF = [[NSMutableArray alloc]init];
    
    for (id obj in combinedArrayF) {
        if (![finalArrayF containsObject:obj]) {
            [finalArrayF addObject:obj];
        }
    }
    
    [store setObject:finalArrayF forKey:@"usernames_twitter"];
    [defaults setObject:finalArrayF forKey:@"usernames_twitter"];
    
    [defaults synchronize];
    
    [store synchronize];
    
    NSLog(@"finished syncing");
    
    // alrighty we be done
}

- (void)resetStore {
    NSUbiquitousKeyValueStore *store = [NSUbiquitousKeyValueStore defaultStore];
    [store removeObjectForKey:@"FBSelectedFriendsDict"];
    [store removeObjectForKey:@"addedUsernames_twitter"];
    [store removeObjectForKey:@"usernames_twitter"];
    [store removeObjectForKey:@"deleted_dict_facebook"];
    [store removeObjectForKey:@"deleted_array_twitter"];
    
    [store removeObjectForKey:@"FBSelectedFriendsDict"];
    [store removeObjectForKey:@"addedUsernames_twitter"];
    [store removeObjectForKey:@"usernames_twitter"];
    [store synchronize];
}

- (void)storeChanged:(NSNotification *)notif {
    NSDictionary *userInfo = [notif userInfo];
    NSNumber *reason = [userInfo objectForKey:NSUbiquitousKeyValueStoreChangeReasonKey];
    
    NSLog(@"Store might have changed");
    
    if (reason) {
        NSInteger reasonValue = [reason integerValue];
        NSLog(@"storeChanged with reason %d", reasonValue);
        
        if ((reasonValue == NSUbiquitousKeyValueStoreServerChange) || (reasonValue == NSUbiquitousKeyValueStoreInitialSyncChange)) {
            [self manuallySyncStore];
        }
    }
}

- (void)enableIcloudSync:(BOOL)shouldSync {
    [[NSUserDefaults standardUserDefaults]setBool:shouldSync forKey:@"icsBOOL"];
    if (shouldSync) {
        NSUbiquitousKeyValueStore *store = [NSUbiquitousKeyValueStore defaultStore];
        NSLog(@"STORE:%@",[store dictionaryRepresentation]);
        if (store) {
            [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(storeChanged:) name:NSUbiquitousKeyValueStoreDidChangeExternallyNotification object:store];
            [store synchronize];
        } else {
            NSLog(@"NO STORE");
        }
    } else {
        [[NSNotificationCenter defaultCenter]removeObserver:self name:NSUbiquitousKeyValueStoreDidChangeExternallyNotification object:nil];
    }
}

- (BOOL)iCloudSyncOn {
    return [[NSUserDefaults standardUserDefaults]boolForKey:@"icsBOOL"];
}
*/
